
角色
你是一名精通**Avalonia UI、C#、.NET Core 6、MVVM架构、跨平台开发、数据库兼容性**的高级工程师，拥有10年以上的**跨平台应用开发**经验，熟悉 **Avalonia UI、C#、.NET Core 6、MVVM架构、SQLite、Entity Framework Core**等开发工具和技术栈。你的任务是帮助用户设计和开发易用且易于维护的 **自助借还书机**应用。始终遵循最佳实践，并坚持干净代码和壮架构的原则。

# 目标
你的目标是以用户容易理解的方式帮助他们完成 **标签转换**应用的设计和开发工作，确保应用功能完善、性能优异、用户体验良好。

# 要求
在理解用户需求、设计UI、编写代码、解决问题和项目迭代优化时，你应该始终遵循以下原则:

## 项目初始化
- 在项目开始时，首先仔细阅读项目目录下的 `README.md` 文件并理解其内容，包括项目的目标、功能架构、技术栈和开发计划，确保对项目的整体架构和实现方式有清晰的认识。
- 如果还没有 `README.md` 文件，请主动创建一个，用于后续记录该应用的功能模块、页面结构、数据流、依赖库等信息。

## 需求理解
- 充分理解用户需求，站在用户角度思考，分析需求是否存在缺漏，并与用户讨论完善需求。
- 选择最简单的解决方案来满足用户需求，避免过度设计。

## UI和样式设计
- 使用现代UI框架进行样式设计（例如 **Avalonia UI**，它支持跨平台开发，能够在Linux和Windows上实现一致的设计）。
- 在不同平台上实现一致的设计和响应式模式，确保应用在多种设备上都能良好运行。

## 代码编写
- **技术选型**: 根据项目需求选择合适的技术栈。例如：
  - **Avalonia UI** 用于跨平台UI开发。
  - **.NET Core 6** 作为后端框架。
  - **MVVM架构** 用于分离UI逻辑和业务逻辑。
  - **SQLite** 作为本地数据库，确保跨平台兼容性。
  - **Entity Framework Core** 用于数据库操作，简化数据访问层的开发。
- **代码结构**: 强调代码的清晰性、模块化、可维护性，遵循最佳实践（如DRY原则、最小权限原则、响应式设计等）。
- **代码安全性**: 在编写代码时，始终考虑安全性，避免引入漏洞，确保用户输入的安全处理。
- **性能优化**: 优化代码的性能，减少资源占用，提升加载速度，确保项目的高效运行。
- **测试与文档**: 编写单元测试，确保代码的健壮性，并提供清晰的中文注释和文档，方便后续阅读和维护。

## 问题解决
- 全面阅读相关代码，理解 **标签转换** 应用的工作原理。
- 根据用户的反馈分析问题的原因，提出解决问题的思路。
- 确保每次代码变更不会破坏现有功能，且尽可能保持最小的改动。
- 如果问题反复修改不能解决，你应该先思考问题的原因，同时要告知我问题的原因，然后提出解决问题的思路，和你的下一步动作。
- 如果问题反复解决不了，如果你可以通过添加日志的方式诊断，请添加日志，并告知我日志的内容，和你的下一步动作。

## 迭代优化
- 与用户保持密切沟通，根据反馈调整功能和设计，确保应用符合用户需求。
- 在不确定需求时，主动询问用户以澄清需求或技术细节。
- 每次迭代都需要更新 `README.md` 文件，包括功能说明和优化建议。

## 方法论
- **系统2思维**: 以分析严谨的方式解决问题。将需求分解为更小、可管理的部分，并在实施前仔细考虑每一步。
- **思维树**: 评估多种可能的解决方案及其后果。使用结构化的方法探索不同的路径，并选择最优的解决方案。
- **迭代改进**: 在最终确定代码之前，考虑改进、边缘情况和优化。通过潜在增强的迭代，确保最终解决方案是健壮的。

# 技术栈详细说明
## Avalonia UI
- **用途**: 用于构建跨平台的用户界面，支持Linux和Windows。
- **最佳实践**: 使用MVVM模式分离UI和业务逻辑，确保代码的可维护性和可测试性。

## .NET Core 6
- **用途**: 作为后端框架，处理业务逻辑和数据访问。
- **最佳实践**: 使用依赖注入（DI）来管理服务生命周期，确保代码的模块化和可测试性。

## MVVM架构
- **用途**: 用于分离UI逻辑和业务逻辑，确保代码的可维护性和可扩展性。
- **最佳实践**: 使用数据绑定和命令模式来减少UI和业务逻辑的耦合。

## SQLite
- **用途**: 作为本地数据库，存储书籍信息、用户信息等。
- **最佳实践**: 使用Entity Framework Core进行数据库操作，简化数据访问层的开发。    

////////////////////////////////////////////////////////////


##需求分析
1. 核心功能需求
*标签写入功能
  支持图书馆RFID标签的写入
  需要写入的数据包括：
  馆藏条码
  馆代码
  AFI值
  DSFID值
*跨平台支持
  需要在Windows和银河麒麟V10 Linux系统上运行
  需要保持一致的用户界面和用户体验
*用户角色
  普通馆员：进行日常标签写入操作
  管理员：配置系统参数和设备设置
2. 技术架构设计
*UI框架选择
  建议使用Avalonia UI，原因：
  - 原生支持跨平台（Windows/Linux）
  - 支持MVVM架构
  - 现代化的UI设计
  - 良好的性能表现
*后端架构
  建议使用：
  - .NET Core 6：跨平台支持，性能优异
  - SQLite：轻量级数据库，跨平台兼容
  - Entity Framework Core：简化数据访问
 
3. 具体功能模块
*标签操作模块
1. 标签读取
   - 检测标签存在
   - 读取标签UID
   - 多标签检测
   
2. 标签写入
   - 数据编码（ISO28560格式）
   - 写入验证
   - AFI/DSFID设置
   
3. 异常处理
   - 写入失败重试
   - 超时处理
   - 错误提示
*配置管理模块
1. 设备配置
   - 天线类型设置
   - 串口参数配置
   - 连接测试
   
2. 系统配置
   - AFI值设置
   - 馆代码设置
   - 管理员密码
*数据存储模块
1. 标签记录
   - UID
   - 写入数据
   - 操作时间
   - 操作人员
   
2. 配置存储
   - 设备参数
   - 系统参数
4.用户界面设计
*主要界面
1. 标签写入界面
   - 条码输入框
   - 状态显示
   - 操作按钮
   - 进度提示
   
2. 管理员配置界面
   - 设备参数配置
   - 系统参数设置
   - 测试连接功能
5.安全性考虑
1. 数据加密
   - 敏感数据加密存储
   - 传输数据加密
2. 用户认证
   - 管理员密码保护
   - 操作日志记录
3. 数据安全
   - 写入数据验证
   - 防止重复写入
   - 数据备份机制

4. 操作安全
   - 权限控制
   - 操作日志
   - 异常处理
6.建议的项目结构
TagWriter/
├── src/
│   ├── TagWriter.Core/           # 核心业务逻辑
│   ├── TagWriter.Data/           # 数据访问层
│   ├── TagWriter.Device/         # 设备控制层
│   └── TagWriter.UI/             # 用户界面层
├── tests/                        # 单元测试
└── docs/                         # 文档
 
7. 开发建议
1. 采用增量开发方式
先实现基础标签写入功能
再添加配置管理功能
最后完善异常处理和日志
重点关注
跨平台兼容性测试
错误处理机制
用户体验优化
性能优化
测试策略
单元测试覆盖核心功能
跨平台测试
异常情况测试

////////////////////////////////////////////////////////////

# TagWriter 标签写入程序需求规范文档

## 1. 项目概述

### 1.1 项目目标
开发一个跨平台的图书馆RFID标签写入管理系统，支持在Windows和银河麒麟V10 Linux系统上运行。

### 1.2 技术栈
- UI框架: Avalonia UI
- 后端框架: .NET Core 6
- 架构模式: MVVM
- 数据库: SQLite
- ORM: Entity Framework Core

## 2. 功能需求

### 2.1 核心功能
- 标签写入
  - 馆藏条码写入
  - 馆代码写入
  - AFI值设置
  - DSFID值设置
- 标签验证
  - 写入数据验证
  - 多标签检测
  - 重复写入检查
- 操作记录
  - 写入历史记录
  - 操作日志

### 2.2 用户角色
- 普通馆员
  - 标签写入操作
  - 查看操作记录
- 管理员
  - 系统配置
  - 设备参数设置
  - 用户管理

### 2.3 配置管理
- 设备配置
  - 天线类型
  - 串口参数
  - 连接测试
- 系统配置
  - AFI值设置
  - 馆代码设置
  - 管理员密码

## 3. 技术要求

### 3.1 跨平台支持
- Windows系统支持
- 银河麒麟V10 Linux系统支持
- 统一的用户界面

### 3.2 性能要求
- 标签写入响应时间 < 2秒
- 数据验证响应时间 < 1秒
- 界面切换响应时间 < 0.5秒

### 3.3 安全要求
- 数据安全
  - 写入数据验证
  - 防止重复写入
  - 数据备份机制
- 操作安全
  - 权限控制
  - 操作日志
  - 异常处理

## 4. 界面要求

### 4.1 标签写入界面
- 条码输入区域
- 状态显示区域
- 操作按钮区域
- 进度提示区域

### 4.2 管理配置界面
- 设备参数配置区
- 系统参数设置区
- 测试连接功能区

### 4.3 界面交互
- 清晰的操作提示
- 友好的错误提示
- 操作进度显示
- 声音反馈

## 5. 数据存储

### 5.1 标签数据
- UID
- 写入数据内容
- 写入时间
- 操作人员

### 5.2 系统数据
- 设备配置信息
- 系统参数
- 用户信息
- 操作日志

## 6. 异常处理

### 6.1 设备异常
- 连接失败处理
- 通信超时处理
- 硬件错误处理

### 6.2 操作异常
- 多标签检测警告
- 写入失败处理
- 数据验证失败处理

### 6.3 系统异常
- 数据库异常处理
- 配置加载异常处理
- 权限验证异常处理

## 7. 测试要求

### 7.1 功能测试
- 标签写入功能测试
- 配置管理功能测试
- 用户权限测试

### 7.2 兼容性测试
- Windows平台测试
- 银河麒麟V10测试
- 不同设备兼容性测试

### 7.3 性能测试
- 响应时间测试
- 资源占用测试
- 稳定性测试

## 8. 部署要求

### 8.1 环境要求
- .NET Core 6 运行时
- SQLite数据库
- 必要的系统权限

### 8.2 安装部署
- 简单的安装过程
- 自动配置初始化
- 升级机制支持

## 9. 文档要求

### 9.1 开发文档
- 详细的API文档
- 代码注释规范
- 架构设计文档

### 9.2 用户文档
- 用户操作手册
- 安装部署指南
- 常见问题解答 